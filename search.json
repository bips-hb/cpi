[{"path":"https://bips-hb.github.io/cpi/articles/intro.html","id":"get-started","dir":"Articles","previous_headings":"","what":"Get started","title":"Introduction to the cpi package","text":"Conditional Predictive Impact (CPI) general test conditional independence supervised learning algorithms. implements conditional variable importance measure can applied supervised learning algorithm loss function. first example, calculate CPI random forest wine data 5-fold cross validation: result CPI value feature, .e. much loss function change feature replaced knockoff version, corresponding standard errors, test statistics, p-values confidence interval.","code":"library(mlr3) library(mlr3learners) library(cpi)  cpi(task = tsk(\"wine\"),      learner = lrn(\"classif.ranger\", predict_type = \"prob\", num.trees = 10),     resampling = rsmp(\"cv\", folds = 5)) #>           Variable      CPI      SE test statistic estimate p.value    ci.lo #> 1       alcalinity  0.00106 0.00346    t      0.31  0.00106  0.3798 -0.00466 #> 2          alcohol  0.02759 0.01088    t      2.54  0.02759  0.0060  0.00961 #> 3              ash  0.00019 0.00019    t      1.00  0.00019  0.1593 -0.00012 #> 4            color  0.21308 0.18515    t      1.15  0.21308  0.1257 -0.09306 #> 5         dilution  0.00046 0.00771    t      0.06  0.00046  0.4761 -0.01229 #> 6       flavanoids  0.00000 0.00000    t      0.00  0.00000  1.0000  0.00000 #> 7              hue  0.00151 0.00705    t      0.21  0.00151  0.4155 -0.01015 #> 8        magnesium  0.00826 0.00494    t      1.67  0.00826  0.0480  0.00010 #> 9            malic  0.00047 0.00412    t      0.11  0.00047  0.4551 -0.00635 #> 10   nonflavanoids  0.00073 0.00205    t      0.36  0.00073  0.3612 -0.00266 #> 11         phenols -0.00351 0.00346    t     -1.01 -0.00351  0.8441 -0.00922 #> 12 proanthocyanins  0.00162 0.00389    t      0.42  0.00162  0.3389 -0.00481 #> 13         proline  0.08475 0.03003    t      2.82  0.08475  0.0027  0.03509"},{"path":"https://bips-hb.github.io/cpi/articles/intro.html","id":"interface-with-mlr3","dir":"Articles","previous_headings":"","what":"Interface with mlr3","title":"Introduction to the cpi package","text":"task, learner resampling strategy specified mlr3 package, provides unified interface machine learning tasks makes quite easy change components. example, can change regularized logistic regression simple holdout resampling strategy: refer mlr3 book full introduction reference. loss function used cpi() function specified measure. default, mean squared error (MSE) used regression log-loss classification. mlr3, corresponds measures \"regr.mse\" \"classif.logloss\". re-run example simple classification error (ce): see 0 CPI values classification error less sensitive small changes hence results lower power.","code":"cpi(task = tsk(\"wine\"),      learner = lrn(\"classif.glmnet\", predict_type = \"prob\", lambda = 0.01),     resampling = rsmp(\"holdout\")) #>           Variable      CPI      SE test statistic estimate p.value    ci.lo #> 1       alcalinity  8.6e-03 1.4e-02    t      0.62  8.6e-03   0.269 -1.5e-02 #> 2          alcohol  2.0e-02 1.4e-02    t      1.46  2.0e-02   0.074 -2.8e-03 #> 3              ash  3.1e-04 2.8e-04    t      1.11  3.1e-04   0.136 -1.6e-04 #> 4            color  3.2e-02 2.1e-02    t      1.57  3.2e-02   0.061 -2.2e-03 #> 5         dilution  8.2e-03 7.2e-03    t      1.15  8.2e-03   0.128 -3.8e-03 #> 6       flavanoids  4.0e-06 4.0e-06    t      1.01  4.0e-06   0.157 -2.6e-06 #> 7              hue  6.4e-03 8.1e-03    t      0.79  6.4e-03   0.217 -7.1e-03 #> 8        magnesium  0.0e+00 0.0e+00    t      0.00  0.0e+00   1.000  0.0e+00 #> 9            malic -8.0e-03 9.3e-03    t     -0.85 -8.0e-03   0.802 -2.4e-02 #> 10   nonflavanoids -9.6e-04 2.9e-03    t     -0.33 -9.6e-04   0.627 -5.9e-03 #> 11         phenols  0.0e+00 0.0e+00    t      0.00  0.0e+00   1.000  0.0e+00 #> 12 proanthocyanins  0.0e+00 0.0e+00    t      0.00  0.0e+00   1.000  0.0e+00 #> 13         proline  3.5e-03 1.8e-02    t      0.19  3.5e-03   0.424 -2.7e-02 cpi(task = tsk(\"wine\"),      learner = lrn(\"classif.glmnet\", lambda = 0.01),     resampling = rsmp(\"holdout\"),      measure = msr(\"classif.ce\")) #>           Variable    CPI    SE test statistic estimate p.value  ci.lo #> 1       alcalinity  0.000 0.000    t      0.00    0.000    1.00  0.000 #> 2          alcohol  0.017 0.030    t      0.57    0.017    0.28 -0.032 #> 3              ash  0.000 0.000    t      0.00    0.000    1.00  0.000 #> 4            color  0.000 0.000    t      0.00    0.000    1.00  0.000 #> 5         dilution -0.017 0.017    t     -1.00   -0.017    0.84 -0.045 #> 6       flavanoids  0.000 0.000    t      0.00    0.000    1.00  0.000 #> 7              hue  0.000 0.000    t      0.00    0.000    1.00  0.000 #> 8        magnesium -0.017 0.017    t     -1.00   -0.017    0.84 -0.045 #> 9            malic -0.017 0.017    t     -1.00   -0.017    0.84 -0.045 #> 10   nonflavanoids -0.017 0.017    t     -1.00   -0.017    0.84 -0.045 #> 11         phenols  0.000 0.000    t      0.00    0.000    1.00  0.000 #> 12 proanthocyanins  0.000 0.000    t      0.00    0.000    1.00  0.000 #> 13         proline  0.017 0.045    t      0.38    0.017    0.35 -0.059"},{"path":"https://bips-hb.github.io/cpi/articles/intro.html","id":"statistical-testing","dir":"Articles","previous_headings":"","what":"Statistical testing","title":"Introduction to the cpi package","text":"CPI offers several statistical tests calculated: t-test (\"t\", default), Wilcoxon signed-rank test (\"wilcox\"), binomial test (\"binom\"), Fisher permutation test (\"fisher\") Bayesian testing (\"bayes\") package BEST. example, re-run first example Fisher’s permutation test:","code":"cpi(task = tsk(\"wine\"),      learner = lrn(\"classif.ranger\", predict_type = \"prob\", num.trees = 10),     resampling = rsmp(\"cv\", folds = 5),      test = \"fisher\") #>           Variable      CPI      SE   test p.value    ci.lo #> 1       alcalinity  0.00864 0.00441 fisher  0.0255  0.00131 #> 2          alcohol  0.02225 0.01082 fisher  0.0180  0.00459 #> 3              ash  0.00000 0.00000 fisher  1.0000  0.00000 #> 4            color  0.03918 0.01555 fisher  0.0040  0.01390 #> 5         dilution  0.00864 0.00780 fisher  0.1395 -0.00435 #> 6       flavanoids -0.00039 0.00039 fisher  1.0000 -0.00078 #> 7              hue  0.00720 0.00738 fisher  0.1700 -0.00473 #> 8        magnesium  0.00344 0.00366 fisher  0.1635 -0.00249 #> 9            malic  0.01378 0.00394 fisher  0.0005  0.00700 #> 10   nonflavanoids -0.00118 0.00289 fisher  0.6405 -0.00614 #> 11         phenols -0.00192 0.00431 fisher  0.6695 -0.00938 #> 12 proanthocyanins  0.00926 0.00476 fisher  0.0220  0.00128 #> 13         proline  0.05066 0.01421 fisher  0.0005  0.02737"},{"path":"https://bips-hb.github.io/cpi/articles/intro.html","id":"knockoff-procedures","dir":"Articles","previous_headings":"","what":"Knockoff procedures","title":"Introduction to the cpi package","text":"CPI relies valid knockoff sampler data analyzed. default, second-order Gaussian knockoffs package knockoff used. However, knockoff sampler can used changing knockoff_fun x_tilde argument cpi() function. , knockoff_fun expects function taking data.frame original data input returning data.frame knockoffs. example, use sequential knockoffs seqknockoff package1: x_tilde argument directly takes knockoff data:","code":"mytask <- as_task_regr(iris, target = \"Petal.Length\") cpi(task = mytask, learner = lrn(\"regr.ranger\", num.trees = 10),      resampling = rsmp(\"cv\", folds = 5),      knockoff_fun = seqknockoff::knockoffs_seq) library(seqknockoff) x_tilde <- knockoffs_seq(iris[, -3]) mytask <- as_task_regr(iris, target = \"Petal.Length\") cpi(task = mytask, learner = lrn(\"regr.ranger\", num.trees = 10),      resampling = rsmp(\"cv\", folds = 5),      x_tilde = x_tilde)"},{"path":"https://bips-hb.github.io/cpi/articles/intro.html","id":"group-cpi","dir":"Articles","previous_headings":"","what":"Group CPI","title":"Introduction to the cpi package","text":"Instead calculating CPI feature separately, can also calculate groups features replacing data whole groups respective knockoff data. cpi() can done groups argument:","code":"cpi(task = tsk(\"iris\"),      learner = lrn(\"classif.glmnet\", predict_type = \"prob\", lambda = 0.01),     resampling = rsmp(\"holdout\"),      groups = list(Sepal = 1:2, Petal = 3:4)) #>   Group    CPI    SE test statistic estimate p.value   ci.lo #> 1 Sepal 0.0033 0.009    t      0.37   0.0033   0.358 -0.0118 #> 2 Petal 0.0192 0.011    t      1.82   0.0192   0.037  0.0015"},{"path":"https://bips-hb.github.io/cpi/articles/intro.html","id":"parallelization","dir":"Articles","previous_headings":"","what":"Parallelization","title":"Introduction to the cpi package","text":"parallel execution, need register parallel backend. Parallelization performed features, .e. CPI feature calculated parallel. example:","code":"doParallel::registerDoParallel(4) cpi(task = tsk(\"wine\"),      learner = lrn(\"classif.ranger\", predict_type = \"prob\", num.trees = 10),     resampling = rsmp(\"cv\", folds = 5))"},{"path":"https://bips-hb.github.io/cpi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marvin N. Wright. Author, maintainer. David S. Watson. Author.","code":""},{"path":"https://bips-hb.github.io/cpi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Watson, D.S. & Wright, M.N. (2021). Testing conditional independence supervised learning algorithms. Machine Learning 110(8):2107-2129. doi:10.1007/s10994-021-06030-6","code":"@Article{,   title = {Testing conditional independence in supervised learning algorithms},   author = {David S. Watson and Marvin N. Wright},   journal = {Machine Learning},   year = {2011},   volume = {110},   number = {8},   pages = {2107--2129},   url = {https://doi.org/10.1007/s10994-021-06030-6}, }"},{"path":"https://bips-hb.github.io/cpi/index.html","id":"conditional-predictive-impact","dir":"","previous_headings":"","what":"Conditional Predictive Impact","title":"Conditional Predictive Impact","text":"David S. Watson, Marvin N. Wright","code":""},{"path":"https://bips-hb.github.io/cpi/index.html","id":"introduction","dir":"","previous_headings":"Conditional Predictive Impact","what":"Introduction","title":"Conditional Predictive Impact","text":"conditional predictive impact (CPI) measure conditional independence. can calculated using supervised learning algorithm, loss function, knockoff sampler. provide statistical inference procedures CPI without parametric assumptions sparsity constraints. method works continuous categorical data.","code":""},{"path":"https://bips-hb.github.io/cpi/index.html","id":"installation","dir":"","previous_headings":"Conditional Predictive Impact","what":"Installation","title":"Conditional Predictive Impact","text":"package CRAN yet. install development version GitHub using devtools, run","code":"devtools::install_github(\"bips-hb/cpi\")"},{"path":"https://bips-hb.github.io/cpi/index.html","id":"examples","dir":"","previous_headings":"Conditional Predictive Impact","what":"Examples","title":"Conditional Predictive Impact","text":"Calculate CPI random forest iris data 5-fold cross validation:","code":"library(mlr3) library(mlr3learners) library(cpi)  cpi(task = tsk(\"iris\"),      learner = lrn(\"classif.ranger\", predict_type = \"prob\"),     resampling = rsmp(\"cv\", folds = 5),      measure = \"classif.logloss\", test = \"t\")"},{"path":"https://bips-hb.github.io/cpi/index.html","id":"references","dir":"","previous_headings":"Conditional Predictive Impact","what":"References","title":"Conditional Predictive Impact","text":"Watson D. S. & Wright, M. N. (2021). Testing conditional independence supervised learning algorithms. Machine Learning. DOI: 10.1007/s10994-021-06030-6.","code":""},{"path":"https://bips-hb.github.io/cpi/reference/cpi.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Predictive Impact (CPI). — cpi","title":"Conditional Predictive Impact (CPI). — cpi","text":"general test conditional  independence supervised learning algorithms. Implements conditional  variable importance measure can applied supervised learning  algorithm loss function. Provides statistical inference procedures  without parametric assumptions applies equally well continuous  categorical predictors outcomes.","code":""},{"path":"https://bips-hb.github.io/cpi/reference/cpi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Predictive Impact (CPI). — cpi","text":"","code":"cpi(   task,   learner,   resampling = NULL,   test_data = NULL,   measure = NULL,   test = \"t\",   log = FALSE,   B = 1999,   alpha = 0.05,   x_tilde = NULL,   knockoff_fun = function(x) knockoff::create.second_order(as.matrix(x)),   groups = NULL,   verbose = FALSE )"},{"path":"https://bips-hb.github.io/cpi/reference/cpi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional Predictive Impact (CPI). — cpi","text":"task prediction mlr3 task, see examples. learner mlr3 learner used CPI. pass string,  learner created via mlr3::lrn. resampling Resampling strategy, mlr3 resampling object  (e.g. rsmp(\"holdout\")), \"oob\" (--bag) \"none\"  (-sample loss). test_data External validation data, use instead resampling. measure Performance measure (loss). Per default, use MSE  (\"regr.mse\") regression logloss (\"classif.logloss\")  classification. test Statistical test perform, one \"t\" (t-test, default),  \"wilcox\" (Wilcoxon signed-rank test), \"binom\" (binomial  test), \"fisher\" (Fisher permutation test) \"bayes\"  (Bayesian testing, computationally intensive!). See Details. log Set TRUE multiplicative CPI (\\(\\lambda\\)),  FALSE (default) additive CPI (\\(\\Delta\\)). B Number permutations Fisher permutation test. alpha Significance level confidence intervals. x_tilde Knockoff matrix data.frame. given (default),  created function given knockoff_fun. knockoff_fun Function generate knockoffs. Default:  knockoff::create.second_order matrix argument. groups (Named) list groups. Set NULL (default) groups, .e. compute CPI feature. See examples. verbose Verbose output resampling procedure.","code":""},{"path":"https://bips-hb.github.io/cpi/reference/cpi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional Predictive Impact (CPI). — cpi","text":"test = \"bayes\" list BEST objects.  case, data.frame row feature columns: Variable/Group Variable/group name CPI CPI value SE Standard error test Testing method statistic Test statistic (t-test, Wilcoxon binomial test) estimate Estimated mean (t-test), median (Wilcoxon test),     proportion \\(\\Delta\\)-values greater 0 (binomial test). p.value p-value ci.lo Lower limit (1 - alpha) * 100% confidence interval Note NA values error result CPI value 0, .e.  difference model performance replacing feature knockoff.","code":""},{"path":"https://bips-hb.github.io/cpi/reference/cpi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional Predictive Impact (CPI). — cpi","text":"function computes conditional predictive impact (CPI) one several features given supervised learning task. represents  mean error inflation replacing true variable knockoff. Large CPI values evidence feature(s) question high  conditional variable importance -- .e., fitted model relies  feature(s) predict outcome, even accounting signal remaining covariates. build mlr3 framework, provides unified interface  training models, specifying loss functions, estimating generalization  error. See package documentation info. Methods implemented frequentist Bayesian inference. default test = \"t\", fast powerful sample sizes. Wilcoxon signed-rank test (test = \"wilcox\") may appropriate  CPI distribution skewed, binomial test (test = \"binom\")  requires basically assumptions may less power. small sample  sizes, recommend permutation tests (test = \"fisher\") Bayesian  methods (test = \"bayes\"). latter case, default priors  assumed. See BEST package info. parallel execution, register backend, e.g. doParallel::registerDoParallel().","code":""},{"path":"https://bips-hb.github.io/cpi/reference/cpi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Conditional Predictive Impact (CPI). — cpi","text":"Watson, D. & Wright, M. (2020). Testing conditional independence  supervised learning algorithms. Machine Learning, 110(8):  2107-2129. doi: 10.1007/s10994-021-06030-6 Candès, E., Fan, Y., Janson, L, & Lv, J. (2018). Panning gold: 'model-X' knockoffs high dimensional controlled variable selection. J. R.  Statistc. Soc. B, 80(3): 551-577. doi: 10.1111/rssb.12265","code":""},{"path":"https://bips-hb.github.io/cpi/reference/cpi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional Predictive Impact (CPI). — cpi","text":"","code":"library(mlr3) library(mlr3learners)  # Regression with linear model and holdout validation cpi(task = tsk(\"mtcars\"), learner = lrn(\"regr.lm\"),      resampling = rsmp(\"holdout\")) #>    Variable           CPI          SE test  statistic      estimate   p.value #> 1        am  3.481839e-01 3.374172675    t  0.1031909  3.481839e-01 0.4599258 #> 2      carb  6.523065e-05 0.000117727    t  0.5540841  6.523065e-05 0.2958476 #> 3       cyl  6.492626e-01 0.760552776    t  0.8536720  6.492626e-01 0.2066341 #> 4      disp  3.314912e-04 0.001346361    t  0.2462128  3.314912e-04 0.4052488 #> 5      drat -6.595054e-01 0.572011492    t -1.1529582 -6.595054e-01 0.8621289 #> 6      gear -3.297953e-01 0.871035982    t -0.3786242 -3.297953e-01 0.6435594 #> 7        hp  2.045677e+00 1.837088438    t  1.1135432  2.045677e+00 0.1457623 #> 8      qsec  1.565815e+00 2.004272140    t  0.7812387  1.565815e+00 0.2263802 #> 9        vs -9.587013e-01 0.830176437    t -1.1548164 -9.587013e-01 0.8624925 #> 10       wt  1.638056e+00 1.483268737    t  1.1043553  1.638056e+00 0.1476514 #>            ci.lo #> 1  -5.7673729161 #> 2  -0.0001481449 #> 3  -0.7292097189 #> 4  -0.0021087353 #> 5  -1.6962539509 #> 6  -1.9085141491 #> 7  -1.2839740406 #> 8  -2.0668503370 #> 9  -2.4633638549 #> 10 -1.0503112987  # \\donttest{ # Classification with logistic regression, log-loss and t-test cpi(task = tsk(\"wine\"),      learner = lrn(\"classif.glmnet\", predict_type = \"prob\", lambda = 0.1),      resampling = rsmp(\"holdout\"),      measure = \"classif.logloss\", test = \"t\") #>           Variable           CPI           SE test  statistic      estimate #> 1       alcalinity  0.000000e+00 0.000000e+00    t  0.0000000  0.000000e+00 #> 2          alcohol  4.893941e-02 2.959351e-02    t  1.6537212  4.893941e-02 #> 3              ash  7.386821e-06 2.347424e-05    t  0.3146777  7.386821e-06 #> 4            color  1.652354e-02 1.001292e-02    t  1.6502219  1.652354e-02 #> 5         dilution -4.908480e-03 8.586667e-03    t -0.5716397 -4.908480e-03 #> 6       flavanoids  5.590166e-06 7.775158e-06    t  0.7189778  5.590166e-06 #> 7              hue  6.422510e-03 6.227559e-03    t  1.0313046  6.422510e-03 #> 8        magnesium  0.000000e+00 0.000000e+00    t  0.0000000  0.000000e+00 #> 9            malic  0.000000e+00 0.000000e+00    t  0.0000000  0.000000e+00 #> 10   nonflavanoids  0.000000e+00 0.000000e+00    t  0.0000000  0.000000e+00 #> 11         phenols  0.000000e+00 0.000000e+00    t  0.0000000  0.000000e+00 #> 12 proanthocyanins  0.000000e+00 0.000000e+00    t  0.0000000  0.000000e+00 #> 13         proline  2.834713e-02 2.346324e-02    t  1.2081508  2.834713e-02 #>       p.value         ci.lo #> 1  1.00000000  0.000000e+00 #> 2  0.05179358 -5.276995e-04 #> 3  0.37706782 -3.185162e-05 #> 4  0.05215164 -2.135843e-04 #> 5  0.71511255 -1.926155e-02 #> 6  0.23752070 -7.406421e-06 #> 7  0.15333971 -3.987183e-03 #> 8  1.00000000  0.000000e+00 #> 9  1.00000000  0.000000e+00 #> 10 1.00000000  0.000000e+00 #> 11 1.00000000  0.000000e+00 #> 12 1.00000000  0.000000e+00 #> 13 0.11594616 -1.087291e-02   # Use your own data (and out-of-bag loss with random forest) mytask <- as_task_classif(iris, target = \"Species\") mylearner <- lrn(\"classif.ranger\", predict_type = \"prob\", keep.inbag = TRUE) cpi(task = mytask, learner = mylearner,      resampling = \"oob\", measure = \"classif.logloss\") #>       Variable           CPI           SE test   statistic      estimate #> 1 Petal.Length  0.0025300367 0.0022233492    t  1.13793941  0.0025300367 #> 2  Petal.Width  0.0014668300 0.0202120202    t  0.07257216  0.0014668300 #> 3 Sepal.Length -0.0004210571 0.0002471293    t -1.70379268 -0.0004210571 #> 4  Sepal.Width -0.0006276611 0.0037535580    t -0.16721765 -0.0006276611 #>     p.value         ci.lo #> 1 0.1284861 -0.0011499276 #> 2 0.4711220 -0.0319869848 #> 3 0.9547478 -0.0008300917 #> 4 0.5662872 -0.0068403421      # Group CPI cpi(task = tsk(\"iris\"),      learner = lrn(\"classif.ranger\", predict_type = \"prob\", num.trees = 10),      resampling = rsmp(\"cv\", folds = 3),      groups = list(Sepal = 1:2, Petal = 3:4)) #>   Group         CPI        SE test   statistic    estimate   p.value      ci.lo #> 1 Sepal  0.01696552 0.3157691    t  0.05372763  0.01696552 0.4786121 -0.5056779 #> 2 Petal -0.41665882 0.2927358    t -1.42332718 -0.41665882 0.9216341 -0.9011789 # }      if (FALSE) {       # Bayesian testing res <- cpi(task = tsk(\"iris\"),             learner = lrn(\"classif.glmnet\", predict_type = \"prob\", lambda = 0.1),             resampling = rsmp(\"holdout\"),             measure = \"classif.logloss\", test = \"bayes\") plot(res$Petal.Length)  # Parallel execution doParallel::registerDoParallel() cpi(task = tsk(\"wine\"),      learner = lrn(\"classif.glmnet\", predict_type = \"prob\", lambda = 0.1),      resampling = rsmp(\"cv\", folds = 5))      # Use sequential knockoffs for categorical features # package available here: https://github.com/kormama1/seqknockoff mytask <- as_task_regr(iris, target = \"Petal.Length\") cpi(task = mytask, learner = lrn(\"regr.ranger\"),      resampling = rsmp(\"holdout\"),      knockoff_fun = seqknockoff::knockoffs_seq) }"},{"path":"https://bips-hb.github.io/cpi/news/index.html","id":"cpi-013","dir":"Changelog","previous_headings":"","what":"cpi 0.1.3","title":"cpi 0.1.3","text":"Save/reset previous mlr3 logging level","code":""},{"path":"https://bips-hb.github.io/cpi/news/index.html","id":"cpi-012","dir":"Changelog","previous_headings":"","what":"cpi 0.1.2","title":"cpi 0.1.2","text":"Speedup examples CRAN","code":""},{"path":"https://bips-hb.github.io/cpi/news/index.html","id":"cpi-011","dir":"Changelog","previous_headings":"","what":"cpi 0.1.1","title":"cpi 0.1.1","text":"Set test statistics 0 CPI=0","code":""},{"path":"https://bips-hb.github.io/cpi/news/index.html","id":"cpi-010","dir":"Changelog","previous_headings":"","what":"cpi 0.1.0","title":"cpi 0.1.0","text":"Migrate mlr3 framework Allow data.frame inputs Add interface knockoff samplers Add group CPI","code":""}]
